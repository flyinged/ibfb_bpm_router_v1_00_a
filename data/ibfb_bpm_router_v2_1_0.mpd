###################################################################
##
## Name     : ibfb_bpm_router_v1_00_a.mpd
## Desc     : Collect and rout data from BPM to up/downstream chains
##          : 
##
###################################################################

BEGIN ibfb_bpm_router

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = VHDL
OPTION IP_GROUP = IBFB
#BUS IF
OPTION DESC = IBFB CAVITY BPM router
OPTION LONG_DESC = Gets data from a BPM and sends it throug GTX. Routes also packets from other BPMs
OPTION ARCH_SUPPORT_MAP = (others=DEVELOPMENT)
OPTION PLATGEN_SYSLEVEL_UPDATE_PROC = generate_corelevel_ucf

## GENERICS
PARAMETER C_K_SOP = 0xFB, DT = std_logic_vector(7 downto 0), DESC = 'Start of Packet character', LONG_DESC = 'K-character used as start-of-packet symbol in IBFB protocol'
PARAMETER C_K_EOP = 0xFD, DT = std_logic_vector(7 downto 0), DESC = 'End of Packet character', LONG_DESC = 'K-character used as end-of-packet symbol in IBFB protocol'
PARAMETER C_GTX_REFCLK_SEL = 0b011, DT = std_logic_vector(2 downto 0), DESC = 'GTX REFCLK Select', LONG_DESC = 'Select between REFCLK0/REFCLK1 for GTX tiles. Bits 2:0 => BPM23, BPM01, P0'
PARAMETER C_P0_REFCLK_FREQ = 125, DT = integer, DESC = 'P0 GTX refclk frequency', LONG_DESC = 'Reference clock frequency for all GTX channels connected to P0'
PARAMETER C_BPM_REFCLK_FREQ = 125, DT = integer, DESC = 'BPM GTX refclk frequency', LONG_DESC = 'Reference clock frequency for all BPM GTX channels'
PARAMETER C_P0_BAUD_RATE = 3125000, DT = integer, DESC = 'P0 GTX baud rate (Kbps)', LONG_DESC = 'Baud rate in Kbit/s for all P0 GTX channels'
PARAMETER C_BPM_BAUD_RATE = 3125000, DT = integer, DESC = 'BPM GTX baud rate (Kbps)', LONG_DESC = 'Baud rate in Kbit/s for all BPM GTX channels'

## Bus Interfaces
BUS_INTERFACE BUS = SPLB, BUS_STD = PLBV46, BUS_TYPE = SLAVE

## Generics for VHDL or Parameters for Verilog
PARAMETER C_BASEADDR = 0xffffffff, DT = std_logic_vector, MIN_SIZE = 0x100, PAIR = C_HIGHADDR, ADDRESS = BASE, BUS = SPLB
PARAMETER C_HIGHADDR = 0x00000000, DT = std_logic_vector, PAIR = C_BASEADDR, ADDRESS = HIGH, BUS = SPLB
PARAMETER C_MEM0_BASEADDR = 0xffffffff, DT = std_logic_vector, PAIR = C_MEM0_HIGHADDR, ADDRESS = BASE, BUS = SPLB, MIN_SIZE = 0x4000
PARAMETER C_MEM0_HIGHADDR = 0x00000000, DT = std_logic_vector, PAIR = C_MEM0_BASEADDR, ADDRESS = HIGH, BUS = SPLB
PARAMETER C_SPLB_AWIDTH = 32, DT = INTEGER, BUS = SPLB, ASSIGNMENT = CONSTANT
PARAMETER C_SPLB_DWIDTH = 128, DT = INTEGER, BUS = SPLB, RANGE = (32, 64, 128)
PARAMETER C_SPLB_NUM_MASTERS = 8, DT = INTEGER, BUS = SPLB, RANGE = (1:16)
PARAMETER C_SPLB_MID_WIDTH = 3, DT = INTEGER, BUS = SPLB, RANGE = (1:4)
PARAMETER C_SPLB_NATIVE_DWIDTH = 32, DT = INTEGER, BUS = SPLB, RANGE = (32, 64, 128), ASSIGNMENT = CONSTANT
PARAMETER C_SPLB_P2P = 0, DT = INTEGER, BUS = SPLB, RANGE = (0, 1)
PARAMETER C_SPLB_SUPPORT_BURSTS = 1, DT = INTEGER, BUS = SPLB, RANGE = (0, 1), ASSIGNMENT = CONSTANT
PARAMETER C_SPLB_SMALLEST_MASTER = 32, DT = INTEGER, BUS = SPLB, RANGE = (32, 64, 128)
PARAMETER C_SPLB_CLK_PERIOD_PS = 10000, DT = INTEGER, BUS = SPLB
#PARAMETER C_INCLUDE_DPHASE_TIMER = 1, DT = INTEGER, RANGE = (0, 1)
PARAMETER C_FAMILY = virtex6, DT = STRING

## PLB Ports
PORT SPLB_Clk = "", DIR = I, SIGIS = CLK, BUS = SPLB
PORT SPLB_Rst = SPLB_Rst, DIR = I, SIGIS = RST, BUS = SPLB
PORT PLB_ABus = PLB_ABus, DIR = I, VEC = [0:31], BUS = SPLB
PORT PLB_UABus = PLB_UABus, DIR = I, VEC = [0:31], BUS = SPLB
PORT PLB_PAValid = PLB_PAValid, DIR = I, BUS = SPLB
PORT PLB_SAValid = PLB_SAValid, DIR = I, BUS = SPLB
PORT PLB_rdPrim = PLB_rdPrim, DIR = I, BUS = SPLB
PORT PLB_wrPrim = PLB_wrPrim, DIR = I, BUS = SPLB
PORT PLB_masterID = PLB_masterID, DIR = I, VEC = [0:(C_SPLB_MID_WIDTH-1)], BUS = SPLB
PORT PLB_abort = PLB_abort, DIR = I, BUS = SPLB
PORT PLB_busLock = PLB_busLock, DIR = I, BUS = SPLB
PORT PLB_RNW = PLB_RNW, DIR = I, BUS = SPLB
PORT PLB_BE = PLB_BE, DIR = I, VEC = [0:((C_SPLB_DWIDTH/8)-1)], BUS = SPLB
PORT PLB_MSize = PLB_MSize, DIR = I, VEC = [0:1], BUS = SPLB
PORT PLB_size = PLB_size, DIR = I, VEC = [0:3], BUS = SPLB
PORT PLB_type = PLB_type, DIR = I, VEC = [0:2], BUS = SPLB
PORT PLB_lockErr = PLB_lockErr, DIR = I, BUS = SPLB
PORT PLB_wrDBus = PLB_wrDBus, DIR = I, VEC = [0:(C_SPLB_DWIDTH-1)], BUS = SPLB
PORT PLB_wrBurst = PLB_wrBurst, DIR = I, BUS = SPLB
PORT PLB_rdBurst = PLB_rdBurst, DIR = I, BUS = SPLB
PORT PLB_wrPendReq = PLB_wrPendReq, DIR = I, BUS = SPLB
PORT PLB_rdPendReq = PLB_rdPendReq, DIR = I, BUS = SPLB
PORT PLB_wrPendPri = PLB_wrPendPri, DIR = I, VEC = [0:1], BUS = SPLB
PORT PLB_rdPendPri = PLB_rdPendPri, DIR = I, VEC = [0:1], BUS = SPLB
PORT PLB_reqPri = PLB_reqPri, DIR = I, VEC = [0:1], BUS = SPLB
PORT PLB_TAttribute = PLB_TAttribute, DIR = I, VEC = [0:15], BUS = SPLB
PORT Sl_addrAck = Sl_addrAck, DIR = O, BUS = SPLB
PORT Sl_SSize = Sl_SSize, DIR = O, VEC = [0:1], BUS = SPLB
PORT Sl_wait = Sl_wait, DIR = O, BUS = SPLB
PORT Sl_rearbitrate = Sl_rearbitrate, DIR = O, BUS = SPLB
PORT Sl_wrDAck = Sl_wrDAck, DIR = O, BUS = SPLB
PORT Sl_wrComp = Sl_wrComp, DIR = O, BUS = SPLB
PORT Sl_wrBTerm = Sl_wrBTerm, DIR = O, BUS = SPLB
PORT Sl_rdDBus = Sl_rdDBus, DIR = O, VEC = [0:(C_SPLB_DWIDTH-1)], BUS = SPLB
PORT Sl_rdWdAddr = Sl_rdWdAddr, DIR = O, VEC = [0:3], BUS = SPLB
PORT Sl_rdDAck = Sl_rdDAck, DIR = O, BUS = SPLB
PORT Sl_rdComp = Sl_rdComp, DIR = O, BUS = SPLB
PORT Sl_rdBTerm = Sl_rdBTerm, DIR = O, BUS = SPLB
PORT Sl_MBusy = Sl_MBusy, DIR = O, VEC = [0:(C_SPLB_NUM_MASTERS-1)], BUS = SPLB
PORT Sl_MWrErr = Sl_MWrErr, DIR = O, VEC = [0:(C_SPLB_NUM_MASTERS-1)], BUS = SPLB
PORT Sl_MRdErr = Sl_MRdErr, DIR = O, VEC = [0:(C_SPLB_NUM_MASTERS-1)], BUS = SPLB
PORT Sl_MIRQ = Sl_MIRQ, DIR = O, VEC = [0:(C_SPLB_NUM_MASTERS-1)], BUS = SPLB

## GTX Clock
IO_INTERFACE IO_IF = MGT_IF
PORT I_GTX_REFCLK1_IN  = "", DIR = I, SIGIS = CLK, IO_IF = MGT_IF
PORT I_GTX_REFCLK2_IN  = "", DIR = I, SIGIS = CLK, IO_IF = MGT_IF
PORT O_GTX_REFCLK_OUT  = "", DIR = O, SIGIS = CLK, IO_IF = MGT_IF

## GTX Serial Ports
PORT I_GTX_RX_N        = "", DIR = I, VEC = [2*2-1:0], IO_IF = MGT_IF
PORT I_GTX_RX_P        = "", DIR = I, VEC = [2*2-1:0], IO_IF = MGT_IF
PORT O_GTX_TX_N        = "", DIR = O, VEC = [2*2-1:0], IO_IF = MGT_IF
PORT O_GTX_TX_P        = "", DIR = O, VEC = [2*2-1:0], IO_IF = MGT_IF

IO_INTERFACE IO_IF = CAV_BPM
PORT i_adc_clk              = "", DIR = I, SIGIS = CLK, IO_IF = CAV_BPM
PORT i_adc_bunch_train_trig = "", DIR = I, IO_IF = CAV_BPM
PORT i_adc_x_new            = "", DIR = I, IO_IF = CAV_BPM
PORT i_adc_x_valid          = "", DIR = I, IO_IF = CAV_BPM
PORT i_adc_x                = "", DIR = I, VEC = [31:0], IO_IF = CAV_BPM
PORT i_adc_y_new            = "", DIR = I, IO_IF = CAV_BPM
PORT i_adc_y_valid          = "", DIR = I, IO_IF = CAV_BPM
PORT i_adc_y                = "", DIR = I, VEC = [31:0], IO_IF = CAV_BPM

IO_INTERFACE IO_IF = CSP_IF
PORT O_CSP_CLK         = "", DIR = O, SIGIS = CLK, IO_IF = CSP_IF
PORT O_CSP_DATA        = "", DIR = O, VEC = [127:0], IO_IF = CSP_IF

END
